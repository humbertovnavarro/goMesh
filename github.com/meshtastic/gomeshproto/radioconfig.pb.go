// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: radioconfig.proto

package gomeshproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// The frequency/regulatory region the user has selected.
//
// Note: In 1.0 builds (which must still be supported by the android app for a
// long time) this field will be unpopulated.
//
// If firmware is ever upgraded from an old 1.0ish build, the old
// MyNodeInfo.region string will be used to set UserPreferences.region and the
// old value will be no longer set.
type RegionCode int32

const (
	RegionCode_Unset RegionCode = 0
	RegionCode_US    RegionCode = 1
	RegionCode_EU433 RegionCode = 2
	RegionCode_EU865 RegionCode = 3
	RegionCode_CN    RegionCode = 4
	RegionCode_JP    RegionCode = 5
	RegionCode_ANZ   RegionCode = 6
	RegionCode_KR    RegionCode = 7
	RegionCode_TW    RegionCode = 8
	RegionCode_RU    RegionCode = 9
)

// Enum value maps for RegionCode.
var (
	RegionCode_name = map[int32]string{
		0: "Unset",
		1: "US",
		2: "EU433",
		3: "EU865",
		4: "CN",
		5: "JP",
		6: "ANZ",
		7: "KR",
		8: "TW",
		9: "RU",
	}
	RegionCode_value = map[string]int32{
		"Unset": 0,
		"US":    1,
		"EU433": 2,
		"EU865": 3,
		"CN":    4,
		"JP":    5,
		"ANZ":   6,
		"KR":    7,
		"TW":    8,
		"RU":    9,
	}
)

func (x RegionCode) Enum() *RegionCode {
	p := new(RegionCode)
	*p = x
	return p
}

func (x RegionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_radioconfig_proto_enumTypes[0].Descriptor()
}

func (RegionCode) Type() protoreflect.EnumType {
	return &file_radioconfig_proto_enumTypes[0]
}

func (x RegionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegionCode.Descriptor instead.
func (RegionCode) EnumDescriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{0}
}

//
// Sets the charge control current of devices with a battery charger that can be
// configured. This is passed into the axp power management chip like on the tbeam.
type ChargeCurrent int32

const (
	ChargeCurrent_MAUnset ChargeCurrent = 0
	ChargeCurrent_MA100   ChargeCurrent = 1
	ChargeCurrent_MA190   ChargeCurrent = 2
	ChargeCurrent_MA280   ChargeCurrent = 3
	ChargeCurrent_MA360   ChargeCurrent = 4
	ChargeCurrent_MA450   ChargeCurrent = 5
	ChargeCurrent_MA550   ChargeCurrent = 6
	ChargeCurrent_MA630   ChargeCurrent = 7
	ChargeCurrent_MA700   ChargeCurrent = 8
	ChargeCurrent_MA780   ChargeCurrent = 9
	ChargeCurrent_MA880   ChargeCurrent = 10
	ChargeCurrent_MA960   ChargeCurrent = 11
	ChargeCurrent_MA1000  ChargeCurrent = 12
	ChargeCurrent_MA1080  ChargeCurrent = 13
	ChargeCurrent_MA1160  ChargeCurrent = 14
	ChargeCurrent_MA1240  ChargeCurrent = 15
	ChargeCurrent_MA1320  ChargeCurrent = 16
)

// Enum value maps for ChargeCurrent.
var (
	ChargeCurrent_name = map[int32]string{
		0:  "MAUnset",
		1:  "MA100",
		2:  "MA190",
		3:  "MA280",
		4:  "MA360",
		5:  "MA450",
		6:  "MA550",
		7:  "MA630",
		8:  "MA700",
		9:  "MA780",
		10: "MA880",
		11: "MA960",
		12: "MA1000",
		13: "MA1080",
		14: "MA1160",
		15: "MA1240",
		16: "MA1320",
	}
	ChargeCurrent_value = map[string]int32{
		"MAUnset": 0,
		"MA100":   1,
		"MA190":   2,
		"MA280":   3,
		"MA360":   4,
		"MA450":   5,
		"MA550":   6,
		"MA630":   7,
		"MA700":   8,
		"MA780":   9,
		"MA880":   10,
		"MA960":   11,
		"MA1000":  12,
		"MA1080":  13,
		"MA1160":  14,
		"MA1240":  15,
		"MA1320":  16,
	}
)

func (x ChargeCurrent) Enum() *ChargeCurrent {
	p := new(ChargeCurrent)
	*p = x
	return p
}

func (x ChargeCurrent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeCurrent) Descriptor() protoreflect.EnumDescriptor {
	return file_radioconfig_proto_enumTypes[1].Descriptor()
}

func (ChargeCurrent) Type() protoreflect.EnumType {
	return &file_radioconfig_proto_enumTypes[1]
}

func (x ChargeCurrent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeCurrent.Descriptor instead.
func (ChargeCurrent) EnumDescriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{1}
}

//
// How the GPS hardware in this unit is operated.
// Note: This is independent of how our location is shared with other devices.
// For that see LocationSharing
type GpsOperation int32

const (
	//
	// This is treated as GpsOpMobile - it is the default setting
	GpsOperation_GpsOpUnset GpsOperation = 0
	//
	// Note: This mode was removed, because it is identical go GpsOpMobile with a gps_update_rate of once per day
	// This node is mostly stationary, we should try to get location only once per day,
	// Once we have that position we should turn the GPS to sleep mode
	// This is the recommended configuration for stationary 'router' nodes
	GpsOperation_GpsOpStationary GpsOperation = 1
	//
	// This node is mobile and we should get GPS position at a rate governed by gps_update_rate
	GpsOperation_GpsOpMobile GpsOperation = 2
	//
	// We should only use the GPS to get time (no location data should be acquired/stored)
	// Once we have the time we treat gps_update_interval as MAXINT (i.e. sleep forever)
	GpsOperation_GpsOpTimeOnly GpsOperation = 3
	//
	// GPS is always turned off - this mode is not recommended - use GpsOpTimeOnly instead
	GpsOperation_GpsOpDisabled GpsOperation = 4
)

// Enum value maps for GpsOperation.
var (
	GpsOperation_name = map[int32]string{
		0: "GpsOpUnset",
		1: "GpsOpStationary",
		2: "GpsOpMobile",
		3: "GpsOpTimeOnly",
		4: "GpsOpDisabled",
	}
	GpsOperation_value = map[string]int32{
		"GpsOpUnset":      0,
		"GpsOpStationary": 1,
		"GpsOpMobile":     2,
		"GpsOpTimeOnly":   3,
		"GpsOpDisabled":   4,
	}
)

func (x GpsOperation) Enum() *GpsOperation {
	p := new(GpsOperation)
	*p = x
	return p
}

func (x GpsOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_radioconfig_proto_enumTypes[2].Descriptor()
}

func (GpsOperation) Type() protoreflect.EnumType {
	return &file_radioconfig_proto_enumTypes[2]
}

func (x GpsOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsOperation.Descriptor instead.
func (GpsOperation) EnumDescriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{2}
}

//
// How our location is shared with other nodes (or the local phone)
type LocationSharing int32

const (
	//
	// This is the default and treated as LocEnabled.
	LocationSharing_LocUnset LocationSharing = 0
	//
	// We are sharing our location
	LocationSharing_LocEnabled LocationSharing = 1
	//
	// We are not sharing our location (if the unit has a GPS it will default to only get time - i.e. GpsOpTimeOnly)
	LocationSharing_LocDisabled LocationSharing = 2
)

// Enum value maps for LocationSharing.
var (
	LocationSharing_name = map[int32]string{
		0: "LocUnset",
		1: "LocEnabled",
		2: "LocDisabled",
	}
	LocationSharing_value = map[string]int32{
		"LocUnset":    0,
		"LocEnabled":  1,
		"LocDisabled": 2,
	}
)

func (x LocationSharing) Enum() *LocationSharing {
	p := new(LocationSharing)
	*p = x
	return p
}

func (x LocationSharing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationSharing) Descriptor() protoreflect.EnumDescriptor {
	return file_radioconfig_proto_enumTypes[3].Descriptor()
}

func (LocationSharing) Type() protoreflect.EnumType {
	return &file_radioconfig_proto_enumTypes[3]
}

func (x LocationSharing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationSharing.Descriptor instead.
func (LocationSharing) EnumDescriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{3}
}

type RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType int32

const (
	RadioConfig_UserPreferences_DHT11 RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType = 0
)

// Enum value maps for RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType.
var (
	RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType_name = map[int32]string{
		0: "DHT11",
	}
	RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType_value = map[string]int32{
		"DHT11": 0,
	}
)

func (x RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) Enum() *RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType {
	p := new(RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType)
	*p = x
	return p
}

func (x RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_radioconfig_proto_enumTypes[4].Descriptor()
}

func (RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) Type() protoreflect.EnumType {
	return &file_radioconfig_proto_enumTypes[4]
}

func (x RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType.Descriptor instead.
func (RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType) EnumDescriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{0, 0, 0}
}

//
// The entire set of user settable/readable settings for our radio device.
// Includes both the current channel settings and any preferences the user has
// set for behavior of their node
type RadioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *RadioConfig_UserPreferences `protobuf:"bytes,1,opt,name=preferences,proto3" json:"preferences,omitempty"`
}

func (x *RadioConfig) Reset() {
	*x = RadioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radioconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioConfig) ProtoMessage() {}

func (x *RadioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_radioconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioConfig.ProtoReflect.Descriptor instead.
func (*RadioConfig) Descriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{0}
}

func (x *RadioConfig) GetPreferences() *RadioConfig_UserPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

//
// see [software design](/software/other/sw-design.md) for more information on these preferences
type RadioConfig_UserPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// We should send our position this often (but only if it has changed significantly)
	// Defaults to 15 minutes
	PositionBroadcastSecs uint32 `protobuf:"varint,1,opt,name=position_broadcast_secs,json=positionBroadcastSecs,proto3" json:"position_broadcast_secs,omitempty"`
	//
	// Send our owner info at least this often (also we always send once at boot - to rejoin the mesh)
	SendOwnerInterval uint32 `protobuf:"varint,2,opt,name=send_owner_interval,json=sendOwnerInterval,proto3" json:"send_owner_interval,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of 1 minute
	WaitBluetoothSecs uint32 `protobuf:"varint,4,opt,name=wait_bluetooth_secs,json=waitBluetoothSecs,proto3" json:"wait_bluetooth_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of one minute
	ScreenOnSecs uint32 `protobuf:"varint,5,opt,name=screen_on_secs,json=screenOnSecs,proto3" json:"screen_on_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of 15 minutes
	// IMPORTANT NOTE FOR DEVICE CLIENTS: YOU MUST SEND SOME SORT OF PACKET TO THE PHONE AT LEAST THIS OFTEN OR THE DEVICE WILL DECIDE YOU ARE GONE!
	PhoneTimeoutSecs uint32 `protobuf:"varint,6,opt,name=phone_timeout_secs,json=phoneTimeoutSecs,proto3" json:"phone_timeout_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of two hours, MAXUINT for disabled
	PhoneSdsTimeoutSec uint32 `protobuf:"varint,7,opt,name=phone_sds_timeout_sec,json=phoneSdsTimeoutSec,proto3" json:"phone_sds_timeout_sec,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of two hours, MAXUINT for disabled
	MeshSdsTimeoutSecs uint32 `protobuf:"varint,8,opt,name=mesh_sds_timeout_secs,json=meshSdsTimeoutSecs,proto3" json:"mesh_sds_timeout_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of one year
	SdsSecs uint32 `protobuf:"varint,9,opt,name=sds_secs,json=sdsSecs,proto3" json:"sds_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of 3600
	LsSecs uint32 `protobuf:"varint,10,opt,name=ls_secs,json=lsSecs,proto3" json:"ls_secs,omitempty"`
	//
	// Power management state machine option.
	// See [power management](/software/other/power.md) for details.
	// 0 for default of 10 seconds
	MinWakeSecs uint32 `protobuf:"varint,11,opt,name=min_wake_secs,json=minWakeSecs,proto3" json:"min_wake_secs,omitempty"`
	//
	// If set, this node will try to join the specified wifi network and
	// acquire an address via DHCP
	WifiSsid string `protobuf:"bytes,12,opt,name=wifi_ssid,json=wifiSsid,proto3" json:"wifi_ssid,omitempty"`
	//
	// If set, will be use to authenticate to the named wifi
	WifiPassword string `protobuf:"bytes,13,opt,name=wifi_password,json=wifiPassword,proto3" json:"wifi_password,omitempty"`
	//
	// If set, the node will operate as an AP (and DHCP server), otherwise it
	// will be a station
	WifiApMode bool `protobuf:"varint,14,opt,name=wifi_ap_mode,json=wifiApMode,proto3" json:"wifi_ap_mode,omitempty"`
	//
	// The region code for my radio (US, CN, EU433, etc...)
	Region RegionCode `protobuf:"varint,15,opt,name=region,proto3,enum=RegionCode" json:"region,omitempty"`
	//
	// Sets the current of the battery charger
	ChargeCurrent ChargeCurrent `protobuf:"varint,16,opt,name=charge_current,json=chargeCurrent,proto3,enum=ChargeCurrent" json:"charge_current,omitempty"`
	//
	// Are we operating as a router.
	// Changes behavior in the following ways:
	// The device will only sleep for critically low battery level (i.e. always tries to stay alive for the mesh)
	// In the future routing decisions will preferentially route packets through nodes with this attribute (because assumed
	// good line of sight)
	IsRouter bool `protobuf:"varint,37,opt,name=is_router,json=isRouter,proto3" json:"is_router,omitempty"`
	//
	// If set, we are powered from a low-current source (i.e. solar), so even if it looks like we have power flowing in
	// we should try to minimize power consumption as much as possible.
	// YOU DO NOT NEED TO SET THIS IF YOU'VE set is_router (it is implied in that case).
	IsLowPower bool `protobuf:"varint,38,opt,name=is_low_power,json=isLowPower,proto3" json:"is_low_power,omitempty"`
	//
	// If set, this node is at a fixed position.
	// We will generate GPS position updates at the regular interval, but use whatever the last lat/lon/alt we have for the node.
	// The lat/lon/alt can be set by an internal GPS or with the help of the app.
	FixedPosition bool `protobuf:"varint,39,opt,name=fixed_position,json=fixedPosition,proto3" json:"fixed_position,omitempty"`
	//
	// If set, this will disable the SerialConsole by not initilizing the StreamAPI
	SerialDisabled bool `protobuf:"varint,40,opt,name=serial_disabled,json=serialDisabled,proto3" json:"serial_disabled,omitempty"`
	//
	// How our location is shared with other nodes (or the local phone)
	LocationShare LocationSharing `protobuf:"varint,32,opt,name=location_share,json=locationShare,proto3,enum=LocationSharing" json:"location_share,omitempty"`
	//
	// How the GPS hardware in this unit is operated.
	// Note: This is independent of how our location is shared with other devices.
	// For that see LocationSharing
	GpsOperation GpsOperation `protobuf:"varint,33,opt,name=gps_operation,json=gpsOperation,proto3,enum=GpsOperation" json:"gps_operation,omitempty"`
	//
	// How often should we try to get GPS position (in seconds) when we are in GpsOpMobile mode?
	// or zero for the default of once every 30 seconds
	// or a very large value (maxint) to update only once at boot.
	GpsUpdateInterval uint32 `protobuf:"varint,34,opt,name=gps_update_interval,json=gpsUpdateInterval,proto3" json:"gps_update_interval,omitempty"`
	//
	// How long should we try to get our position during each gps_update_interval attempt?  (in seconds)
	// Or if zero, use the default of 30 seconds.
	// If we don't get a new gps fix in that time, the gps will be put into sleep until  the next gps_update_rate
	// window.
	GpsAttemptTime uint32 `protobuf:"varint,36,opt,name=gps_attempt_time,json=gpsAttemptTime,proto3" json:"gps_attempt_time,omitempty"`
	//
	// This parameter is for advanced users with advanced test equipment, we do not recommend most users use it.
	// A frequency offset that is added to to the calculated band center frequency.
	// Used to correct for crystal calibration errors.
	FrequencyOffset float32 `protobuf:"fixed32,41,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
	//
	// The server to use for our MQTT global message gateway feature.
	// If not set, the default server will be used
	MqttServer string `protobuf:"bytes,42,opt,name=mqtt_server,json=mqttServer,proto3" json:"mqtt_server,omitempty"`
	//
	// If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
	// is_uplink_enabled or is_downlink_enabled.
	// But if this flag is set, all MQTT features will be disabled and no servers will be contacted.
	MqttDisabled bool `protobuf:"varint,43,opt,name=mqtt_disabled,json=mqttDisabled,proto3" json:"mqtt_disabled,omitempty"`
	//
	// This setting is never saved to disk, but if set, all device settings will be returned to factory defaults.
	// (Region, serial number etc... will be preserved)
	FactoryReset bool `protobuf:"varint,100,opt,name=factory_reset,json=factoryReset,proto3" json:"factory_reset,omitempty"`
	//
	// By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
	// Set this to true to leave the debug log outputting even when API is active.
	DebugLogEnabled bool `protobuf:"varint,101,opt,name=debug_log_enabled,json=debugLogEnabled,proto3" json:"debug_log_enabled,omitempty"`
	//
	// If true, radio should not try to be smart about what packets to queue to
	// the phone
	// bool keep_all_packets = 101;
	// If true, we will try to capture all the packets sent on the mesh, not just the ones destined to our node.
	// bool promiscuous_mode = 102;
	// For testing it is useful sometimes to force a node to never listen to
	// particular other nodes (simulating radio out of range). All nodenums listed
	// in ignore_incoming will have packets they send droped on receive (by router.cpp)
	IgnoreIncoming []uint32 `protobuf:"varint,103,rep,packed,name=ignore_incoming,json=ignoreIncoming,proto3" json:"ignore_incoming,omitempty"`
	//
	// Preferences for the SerialPlugin
	// FIXME - Move this out of UserPreferences and into a section for plugin configuration.
	SerialpluginEnabled bool   `protobuf:"varint,120,opt,name=serialplugin_enabled,json=serialpluginEnabled,proto3" json:"serialplugin_enabled,omitempty"`
	SerialpluginEcho    bool   `protobuf:"varint,121,opt,name=serialplugin_echo,json=serialpluginEcho,proto3" json:"serialplugin_echo,omitempty"`
	SerialpluginRxd     uint32 `protobuf:"varint,122,opt,name=serialplugin_rxd,json=serialpluginRxd,proto3" json:"serialplugin_rxd,omitempty"`
	SerialpluginTxd     uint32 `protobuf:"varint,123,opt,name=serialplugin_txd,json=serialpluginTxd,proto3" json:"serialplugin_txd,omitempty"`
	SerialpluginTimeout uint32 `protobuf:"varint,124,opt,name=serialplugin_timeout,json=serialpluginTimeout,proto3" json:"serialplugin_timeout,omitempty"`
	SerialpluginMode    uint32 `protobuf:"varint,125,opt,name=serialplugin_mode,json=serialpluginMode,proto3" json:"serialplugin_mode,omitempty"`
	//
	// Preferences for the ExternalNotificationPlugin
	// FIXME - Move this out of UserPreferences and into a section for plugin configuration.
	ExtNotificationPluginEnabled      bool   `protobuf:"varint,126,opt,name=ext_notification_plugin_enabled,json=extNotificationPluginEnabled,proto3" json:"ext_notification_plugin_enabled,omitempty"`
	ExtNotificationPluginOutputMs     uint32 `protobuf:"varint,127,opt,name=ext_notification_plugin_output_ms,json=extNotificationPluginOutputMs,proto3" json:"ext_notification_plugin_output_ms,omitempty"`
	ExtNotificationPluginOutput       uint32 `protobuf:"varint,128,opt,name=ext_notification_plugin_output,json=extNotificationPluginOutput,proto3" json:"ext_notification_plugin_output,omitempty"`
	ExtNotificationPluginActive       bool   `protobuf:"varint,129,opt,name=ext_notification_plugin_active,json=extNotificationPluginActive,proto3" json:"ext_notification_plugin_active,omitempty"`
	ExtNotificationPluginAlertMessage bool   `protobuf:"varint,130,opt,name=ext_notification_plugin_alert_message,json=extNotificationPluginAlertMessage,proto3" json:"ext_notification_plugin_alert_message,omitempty"`
	ExtNotificationPluginAlertBell    bool   `protobuf:"varint,131,opt,name=ext_notification_plugin_alert_bell,json=extNotificationPluginAlertBell,proto3" json:"ext_notification_plugin_alert_bell,omitempty"`
	//
	//Preferences for the RangeTestPlugin
	// FIXME - Move this out of UserPreferences and into a section for plugin configuration.
	RangeTestPluginEnabled bool   `protobuf:"varint,132,opt,name=range_test_plugin_enabled,json=rangeTestPluginEnabled,proto3" json:"range_test_plugin_enabled,omitempty"`
	RangeTestPluginSender  uint32 `protobuf:"varint,133,opt,name=range_test_plugin_sender,json=rangeTestPluginSender,proto3" json:"range_test_plugin_sender,omitempty"`
	RangeTestPluginSave    bool   `protobuf:"varint,134,opt,name=range_test_plugin_save,json=rangeTestPluginSave,proto3" json:"range_test_plugin_save,omitempty"`
	//
	// Preferences for the StoreForwardPlugin
	//FIXME - Move this out of UserPreferences and into a section for plugin configuration. (was 136)
	StoreForwardPluginEnabled bool   `protobuf:"varint,148,opt,name=store_forward_plugin_enabled,json=storeForwardPluginEnabled,proto3" json:"store_forward_plugin_enabled,omitempty"`
	StoreForwardPluginRecords uint32 `protobuf:"varint,137,opt,name=store_forward_plugin_records,json=storeForwardPluginRecords,proto3" json:"store_forward_plugin_records,omitempty"`
	//
	// Preferences for the EnvironmentalMeasurement Plugin
	// FIXME - Move this out of UserPreferences and into a section for plugin configuration.
	// Enable/Disable the environmental measurement plugin measurement collection
	EnvironmentalMeasurementPluginMeasurementEnabled bool `protobuf:"varint,140,opt,name=environmental_measurement_plugin_measurement_enabled,json=environmentalMeasurementPluginMeasurementEnabled,proto3" json:"environmental_measurement_plugin_measurement_enabled,omitempty"`
	//
	// Enable/Disable the environmental measurement plugin on-device display
	EnvironmentalMeasurementPluginScreenEnabled bool `protobuf:"varint,141,opt,name=environmental_measurement_plugin_screen_enabled,json=environmentalMeasurementPluginScreenEnabled,proto3" json:"environmental_measurement_plugin_screen_enabled,omitempty"`
	//
	// Sometimes sensor reads can fail.
	// If this happens, we will retry a configurable number of attempts,
	// each attempt will be delayed by the minimum required refresh rate for that sensor
	EnvironmentalMeasurementPluginReadErrorCountThreshold uint32 `protobuf:"varint,142,opt,name=environmental_measurement_plugin_read_error_count_threshold,json=environmentalMeasurementPluginReadErrorCountThreshold,proto3" json:"environmental_measurement_plugin_read_error_count_threshold,omitempty"`
	//
	// Interval in seconds of how often we should try to send our
	// measurements to the mesh
	EnvironmentalMeasurementPluginUpdateInterval uint32 `protobuf:"varint,143,opt,name=environmental_measurement_plugin_update_interval,json=environmentalMeasurementPluginUpdateInterval,proto3" json:"environmental_measurement_plugin_update_interval,omitempty"`
	//
	// Sometimes we can end up with more than read_error_count_threshold failures.
	// In this case, we will stop trying to read from the sensor for a while.
	// Wait this long until trying to read from the sensor again
	EnvironmentalMeasurementPluginRecoveryInterval uint32 `protobuf:"varint,144,opt,name=environmental_measurement_plugin_recovery_interval,json=environmentalMeasurementPluginRecoveryInterval,proto3" json:"environmental_measurement_plugin_recovery_interval,omitempty"`
	//
	// We'll always read the sensor in Celsius, but sometimes we might want to
	// display the results in Farenheit as a "user preference".
	EnvironmentalMeasurementPluginDisplayFarenheit bool `protobuf:"varint,145,opt,name=environmental_measurement_plugin_display_farenheit,json=environmentalMeasurementPluginDisplayFarenheit,proto3" json:"environmental_measurement_plugin_display_farenheit,omitempty"`
	//
	// Specify the sensor type
	EnvironmentalMeasurementPluginSensorType RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType `protobuf:"varint,146,opt,name=environmental_measurement_plugin_sensor_type,json=environmentalMeasurementPluginSensorType,proto3,enum=RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType" json:"environmental_measurement_plugin_sensor_type,omitempty"`
	//
	// Specify the peferred GPIO Pin for sensor readings
	EnvironmentalMeasurementPluginSensorPin uint32 `protobuf:"varint,147,opt,name=environmental_measurement_plugin_sensor_pin,json=environmentalMeasurementPluginSensorPin,proto3" json:"environmental_measurement_plugin_sensor_pin,omitempty"`
}

func (x *RadioConfig_UserPreferences) Reset() {
	*x = RadioConfig_UserPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_radioconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioConfig_UserPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioConfig_UserPreferences) ProtoMessage() {}

func (x *RadioConfig_UserPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_radioconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioConfig_UserPreferences.ProtoReflect.Descriptor instead.
func (*RadioConfig_UserPreferences) Descriptor() ([]byte, []int) {
	return file_radioconfig_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RadioConfig_UserPreferences) GetPositionBroadcastSecs() uint32 {
	if x != nil {
		return x.PositionBroadcastSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetSendOwnerInterval() uint32 {
	if x != nil {
		return x.SendOwnerInterval
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetWaitBluetoothSecs() uint32 {
	if x != nil {
		return x.WaitBluetoothSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetScreenOnSecs() uint32 {
	if x != nil {
		return x.ScreenOnSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetPhoneTimeoutSecs() uint32 {
	if x != nil {
		return x.PhoneTimeoutSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetPhoneSdsTimeoutSec() uint32 {
	if x != nil {
		return x.PhoneSdsTimeoutSec
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetMeshSdsTimeoutSecs() uint32 {
	if x != nil {
		return x.MeshSdsTimeoutSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetSdsSecs() uint32 {
	if x != nil {
		return x.SdsSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetLsSecs() uint32 {
	if x != nil {
		return x.LsSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetMinWakeSecs() uint32 {
	if x != nil {
		return x.MinWakeSecs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetWifiSsid() string {
	if x != nil {
		return x.WifiSsid
	}
	return ""
}

func (x *RadioConfig_UserPreferences) GetWifiPassword() string {
	if x != nil {
		return x.WifiPassword
	}
	return ""
}

func (x *RadioConfig_UserPreferences) GetWifiApMode() bool {
	if x != nil {
		return x.WifiApMode
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetRegion() RegionCode {
	if x != nil {
		return x.Region
	}
	return RegionCode_Unset
}

func (x *RadioConfig_UserPreferences) GetChargeCurrent() ChargeCurrent {
	if x != nil {
		return x.ChargeCurrent
	}
	return ChargeCurrent_MAUnset
}

func (x *RadioConfig_UserPreferences) GetIsRouter() bool {
	if x != nil {
		return x.IsRouter
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetIsLowPower() bool {
	if x != nil {
		return x.IsLowPower
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetFixedPosition() bool {
	if x != nil {
		return x.FixedPosition
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetSerialDisabled() bool {
	if x != nil {
		return x.SerialDisabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetLocationShare() LocationSharing {
	if x != nil {
		return x.LocationShare
	}
	return LocationSharing_LocUnset
}

func (x *RadioConfig_UserPreferences) GetGpsOperation() GpsOperation {
	if x != nil {
		return x.GpsOperation
	}
	return GpsOperation_GpsOpUnset
}

func (x *RadioConfig_UserPreferences) GetGpsUpdateInterval() uint32 {
	if x != nil {
		return x.GpsUpdateInterval
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetGpsAttemptTime() uint32 {
	if x != nil {
		return x.GpsAttemptTime
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetFrequencyOffset() float32 {
	if x != nil {
		return x.FrequencyOffset
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetMqttServer() string {
	if x != nil {
		return x.MqttServer
	}
	return ""
}

func (x *RadioConfig_UserPreferences) GetMqttDisabled() bool {
	if x != nil {
		return x.MqttDisabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetFactoryReset() bool {
	if x != nil {
		return x.FactoryReset
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetDebugLogEnabled() bool {
	if x != nil {
		return x.DebugLogEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetIgnoreIncoming() []uint32 {
	if x != nil {
		return x.IgnoreIncoming
	}
	return nil
}

func (x *RadioConfig_UserPreferences) GetSerialpluginEnabled() bool {
	if x != nil {
		return x.SerialpluginEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetSerialpluginEcho() bool {
	if x != nil {
		return x.SerialpluginEcho
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetSerialpluginRxd() uint32 {
	if x != nil {
		return x.SerialpluginRxd
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetSerialpluginTxd() uint32 {
	if x != nil {
		return x.SerialpluginTxd
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetSerialpluginTimeout() uint32 {
	if x != nil {
		return x.SerialpluginTimeout
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetSerialpluginMode() uint32 {
	if x != nil {
		return x.SerialpluginMode
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginEnabled() bool {
	if x != nil {
		return x.ExtNotificationPluginEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginOutputMs() uint32 {
	if x != nil {
		return x.ExtNotificationPluginOutputMs
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginOutput() uint32 {
	if x != nil {
		return x.ExtNotificationPluginOutput
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginActive() bool {
	if x != nil {
		return x.ExtNotificationPluginActive
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginAlertMessage() bool {
	if x != nil {
		return x.ExtNotificationPluginAlertMessage
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetExtNotificationPluginAlertBell() bool {
	if x != nil {
		return x.ExtNotificationPluginAlertBell
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetRangeTestPluginEnabled() bool {
	if x != nil {
		return x.RangeTestPluginEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetRangeTestPluginSender() uint32 {
	if x != nil {
		return x.RangeTestPluginSender
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetRangeTestPluginSave() bool {
	if x != nil {
		return x.RangeTestPluginSave
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetStoreForwardPluginEnabled() bool {
	if x != nil {
		return x.StoreForwardPluginEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetStoreForwardPluginRecords() uint32 {
	if x != nil {
		return x.StoreForwardPluginRecords
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginMeasurementEnabled() bool {
	if x != nil {
		return x.EnvironmentalMeasurementPluginMeasurementEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginScreenEnabled() bool {
	if x != nil {
		return x.EnvironmentalMeasurementPluginScreenEnabled
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginReadErrorCountThreshold() uint32 {
	if x != nil {
		return x.EnvironmentalMeasurementPluginReadErrorCountThreshold
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginUpdateInterval() uint32 {
	if x != nil {
		return x.EnvironmentalMeasurementPluginUpdateInterval
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginRecoveryInterval() uint32 {
	if x != nil {
		return x.EnvironmentalMeasurementPluginRecoveryInterval
	}
	return 0
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginDisplayFarenheit() bool {
	if x != nil {
		return x.EnvironmentalMeasurementPluginDisplayFarenheit
	}
	return false
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginSensorType() RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType {
	if x != nil {
		return x.EnvironmentalMeasurementPluginSensorType
	}
	return RadioConfig_UserPreferences_DHT11
}

func (x *RadioConfig_UserPreferences) GetEnvironmentalMeasurementPluginSensorPin() uint32 {
	if x != nil {
		return x.EnvironmentalMeasurementPluginSensorPin
	}
	return 0
}

var File_radioconfig_proto protoreflect.FileDescriptor

var file_radioconfig_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x19, 0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0x92, 0x19, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x61,
	0x69, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f,
	0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x64, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x64, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x53, 0x64, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x64, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x64, 0x73,
	0x53, 0x65, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x41,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x67, 0x70, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x47, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x67, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x67, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x70, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x70, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x70, 0x73, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x71, 0x74, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x78, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x78, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x78, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x21, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x65, 0x78, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x44, 0x0a, 0x1e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x25, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x6c, 0x6c, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x42, 0x65, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x61, 0x76,
	0x65, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x6f, 0x0a, 0x34, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x2b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7b, 0x0a,
	0x3b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x35, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x67, 0x0a, 0x30, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x6b, 0x0a, 0x32, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x6b, 0x0a, 0x32, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x72,
	0x65, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x72, 0x65, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0xa0, 0x01,
	0x0a, 0x2c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x28, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5d, 0x0a, 0x2b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x27, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x69, 0x6e, 0x22,
	0x2f, 0x0a, 0x22, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x48, 0x54, 0x31, 0x31, 0x10, 0x00,
	0x4a, 0x06, 0x08, 0x88, 0x01, 0x10, 0x89, 0x01, 0x2a, 0x66, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x55, 0x34,
	0x33, 0x33, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x55, 0x38, 0x36, 0x35, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x43, 0x4e, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x50, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x5a, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x52, 0x10, 0x07,
	0x12, 0x06, 0x0a, 0x02, 0x54, 0x57, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x55, 0x10, 0x09,
	0x2a, 0xd1, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x41, 0x31, 0x30, 0x30, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41,
	0x31, 0x39, 0x30, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x32, 0x38, 0x30, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x33, 0x36, 0x30, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x41, 0x34, 0x35, 0x30, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x35, 0x35, 0x30, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x36, 0x33, 0x30, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x41, 0x37, 0x30, 0x30, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x37, 0x38, 0x30,
	0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x38, 0x38, 0x30, 0x10, 0x0a, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x41, 0x39, 0x36, 0x30, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x31, 0x30,
	0x30, 0x30, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x31, 0x30, 0x38, 0x30, 0x10, 0x0d,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x31, 0x31, 0x36, 0x30, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x31, 0x32, 0x34, 0x30, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x31, 0x33,
	0x32, 0x30, 0x10, 0x10, 0x2a, 0x6a, 0x0a, 0x0c, 0x47, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x70, 0x73, 0x4f, 0x70, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x70, 0x73, 0x4f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x70, 0x73,
	0x4f, 0x70, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x70,
	0x73, 0x4f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x70, 0x73, 0x4f, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04,
	0x2a, 0x40, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x42, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76,
	0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x42, 0x11, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x48, 0x03, 0x5a, 0x21,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_radioconfig_proto_rawDescOnce sync.Once
	file_radioconfig_proto_rawDescData = file_radioconfig_proto_rawDesc
)

func file_radioconfig_proto_rawDescGZIP() []byte {
	file_radioconfig_proto_rawDescOnce.Do(func() {
		file_radioconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_radioconfig_proto_rawDescData)
	})
	return file_radioconfig_proto_rawDescData
}

var file_radioconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_radioconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_radioconfig_proto_goTypes = []interface{}{
	(RegionCode)(0),      // 0: RegionCode
	(ChargeCurrent)(0),   // 1: ChargeCurrent
	(GpsOperation)(0),    // 2: GpsOperation
	(LocationSharing)(0), // 3: LocationSharing
	(RadioConfig_UserPreferences_EnvironmentalMeasurementSensorType)(0), // 4: RadioConfig.UserPreferences.EnvironmentalMeasurementSensorType
	(*RadioConfig)(nil),                 // 5: RadioConfig
	(*RadioConfig_UserPreferences)(nil), // 6: RadioConfig.UserPreferences
}
var file_radioconfig_proto_depIdxs = []int32{
	6, // 0: RadioConfig.preferences:type_name -> RadioConfig.UserPreferences
	0, // 1: RadioConfig.UserPreferences.region:type_name -> RegionCode
	1, // 2: RadioConfig.UserPreferences.charge_current:type_name -> ChargeCurrent
	3, // 3: RadioConfig.UserPreferences.location_share:type_name -> LocationSharing
	2, // 4: RadioConfig.UserPreferences.gps_operation:type_name -> GpsOperation
	4, // 5: RadioConfig.UserPreferences.environmental_measurement_plugin_sensor_type:type_name -> RadioConfig.UserPreferences.EnvironmentalMeasurementSensorType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_radioconfig_proto_init() }
func file_radioconfig_proto_init() {
	if File_radioconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_radioconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_radioconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioConfig_UserPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_radioconfig_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_radioconfig_proto_goTypes,
		DependencyIndexes: file_radioconfig_proto_depIdxs,
		EnumInfos:         file_radioconfig_proto_enumTypes,
		MessageInfos:      file_radioconfig_proto_msgTypes,
	}.Build()
	File_radioconfig_proto = out.File
	file_radioconfig_proto_rawDesc = nil
	file_radioconfig_proto_goTypes = nil
	file_radioconfig_proto_depIdxs = nil
}
